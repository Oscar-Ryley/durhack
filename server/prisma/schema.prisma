// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Interest {
    id         Int    @id @default(autoincrement())
    firstNames String @db.VarChar(256)
    lastNames  String @db.VarChar(256)
    email      String @unique @db.VarChar(256)
}

model User {
    keycloakUserId String          @id @map("keycloak_user_id") @db.Uuid
    tokenSet       TokenSet?
    sessions       SessionRecord[]
    userInfo       UserInfo?
    userFlags      UserFlag[]
}

model UserInfo{ // stores extra data not covered by keycloak
    userId              String    @id @map("user_id") @db.Uuid
    user                User      @relation(fields: [userId], references: [keycloakUserId])

    age                 Int       @db.SmallInt
    university          String    @db.VarChar(50)
    graduationYear            DateTime  @db.Date         @map("graduation_year")
    levelOfStudy        String    @db.VarChar(50)  @map("level_of_study")
    country             String    @db.VarChar(256)
}

model UserFlag{
    userId              String    @map("user_id") @db.Uuid
    user                User      @relation(fields: [userId], references: [keycloakUserId])
    name                String    @map("flag_name")

    @@id(fields: [userId, name], name:"id", map:"user_id_and_name")
}

model TokenSet {
    userId String @id @map("user_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [keycloakUserId])

    tokenType    String?   @map("token_type")
    accessToken  String?   @map("access_token")
    idToken      String?   @map("id_token")
    refreshToken String?   @map("refresh_token")
    scope        String?
    accessExpiry DateTime? @db.Timestamp(0)
    sessionState String?
}

model SessionRecord {
    sessionRecordId String    @id @map("session_record_id")
    userId          String?   @map("user_id") @db.Uuid
    user            User?     @relation(fields: [userId], references: [keycloakUserId])
    data            Json
    expiresAt       DateTime?
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime  @updatedAt @map("updated_at")

    @@index([userId])
}
