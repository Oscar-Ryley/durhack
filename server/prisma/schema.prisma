// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Interest {
    id         Int    @id @default(autoincrement())
    firstNames String @db.VarChar(256)
    lastNames  String @db.VarChar(256)
    email      String @unique @db.VarChar(256)
    year       Int    @default(2024)
}

model User {
    keycloakUserId String          @id @map("keycloak_user_id") @db.Uuid
    tokenSet       TokenSet?
    sessions       SessionRecord[]
    userCv         UserCV?
    userInfo       UserInfo?
    userFlags      UserFlag[]
}

model UserCV {
    userId      String @id() @map("user_id") @db.Uuid()
    user        User   @relation(fields: [userId], references: [keycloakUserId])
    filename    String
    contentType String @map("content_type")
    content     Bytes
}

model UserInfo {
    userId String @id @map("user_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [keycloakUserId])

    applicationStatus UserApplicationStatus @default(incomplete) @map("application_status")
    age               Int?                  @db.SmallInt
    university        String?               @db.VarChar(50)
    graduationYear    DateTime?             @map("graduation_year") @db.Date
    levelOfStudy      String?               @map("level_of_study") @db.VarChar(50)
    country           String?               @db.Char(3)
}

model UserFlag {
    userId   String @map("user_id") @db.Uuid
    user     User   @relation(fields: [userId], references: [keycloakUserId])
    flagName String

    @@id(fields: [userId, flagName], name: "id", map: "user_id_and_flag_name")
}

model TokenSet {
    userId String @id @map("user_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [keycloakUserId])

    tokenType    String?   @map("token_type")
    accessToken  String?   @map("access_token")
    idToken      String?   @map("id_token")
    refreshToken String?   @map("refresh_token")
    scope        String?
    accessExpiry DateTime? @map("access_expiry") @db.Timestamp(0)
    sessionState String?   @map("session_state")
}

model SessionRecord {
    sessionRecordId String    @id @map("session_record_id")
    userId          String?   @map("user_id") @db.Uuid
    user            User?     @relation(fields: [userId], references: [keycloakUserId])
    data            Json
    expiresAt       DateTime? @map("expires_at")
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime  @updatedAt @map("updated_at")

    @@index([userId])
}

enum UserApplicationStatus {
    incomplete
    submitted
    accepted
    waitingList @map("waiting_list")
}
